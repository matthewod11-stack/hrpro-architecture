name: CI

on:
  push:
    branches:
      - main
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff, black)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black
      - name: Ruff check
        run: ruff check .
      - name: Black check
        run: black --check .

  typecheck:
    name: Typecheck (mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install mypy
      - name: Mypy check
        run: mypy . --strict

  security:
    name: Security (bandit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit
      - name: Bandit check
        run: bandit -r . -x .venv,tests -q

  markdown:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install markdownlint
        run: npm install -g markdownlint-cli2
      - name: Run markdownlint
        run: markdownlint-cli2 "**/*.md"

  traceability:
    name: Traceability Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install validator requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
      - name: Run traceability validator
        run: |
          python tools/validate_traceability_md.py \
            --prd docs/PRD/PRD_v4.0_unified_numbered.md \
            --arch docs/Architecture/Architecture_v4.1_unified.md \
            --ui docs/UI_Framework/UIFramework_v4.0_unified_numbered.md \
            --trace docs/traceability/Traceability_v4.1_prefilled.xlsx \
            --out docs/traceability/Traceability_link_check.csv

      - name: Upload traceability report
        uses: actions/upload-artifact@v4
        with:
          name: traceability-report
          path: docs/traceability/Traceability_link_check.csv

      - name: Summarize traceability results (JSON)
        id: trace_json
        run: |
          chmod +x tools/traceability_comment.py
          python tools/traceability_comment.py docs/traceability/Traceability_link_check.csv > traceability_summary.json
          cat traceability_summary.json

      - name: Comment summary on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('traceability_summary.json','utf8'));
            const lines = [];
            const status = summary.ok ? '✅ **Traceability: OK**' : '❌ **Traceability: FAIL**';
            lines.push(status);
            lines.push('');
            lines.push(`- Rows checked: **${summary.total ?? 0}**`);
            lines.push(`- Failures: **${summary.failed ?? 0}**`);
            lines.push('');
            if (!summary.ok && summary.sample && summary.sample.length) {
              lines.push('<details><summary>First failing rows (up to 10)</summary>');
              lines.push('');
              const keys = Object.keys(summary.sample[0] || {});
              lines.push('| ' + keys.join(' | ') + ' |');
              lines.push('|' + keys.map(()=> '---').join('|') + '|');
              for (const row of summary.sample) {
                lines.push('| ' + keys.map(k => String(row[k] ?? '')).join(' | ') + ' |');
              }
              lines.push('</details>');
            }
            lines.push('');
            lines.push(`Artifact: \`traceability-report\` → \`${summary.path}\``);
            const body = lines.join('\n');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

  tests:
    name: Tests (pytest, coverage)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install test requirements
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt || true
      - name: Run tests
        run: pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml
      - name: Enforce coverage gate
        run: python tools/coverage_gate.py
      - name: Generate coverage badge
        run: python tools/coverage_badge.py
      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage-badge.svg

# Required status checks for branch protection:
# lint, typecheck, security, markdown, traceability, tests

  labels_sync:
    name: labels-sync (main only)
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      metadata: read
      administration: write
    steps:
      - uses: actions/checkout@v4
      - name: Sync labels from .github/labels.yml
        uses: crazy-max/ghaction-github-labeler@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          yaml-file: .github/labels.yml
          prune: true
